{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red100\green56\blue32;\red196\green26\blue22;
\red170\green13\blue145;\red28\green0\blue207;\red38\green71\blue75;\red46\green13\blue110;}
\paperw11900\paperh16840\margl1440\margr1440\vieww20700\viewh11120\viewkind0
\deftab626
\pard\tx626\pardeftab626\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \CocoaLigature0 /* \
 \'93Analogue Sequencer\'94\
 Written by: Christoph Schick, (c) 2015\
 */\cf0 \
\
\cf3 #include \cf4 "aservelibs/aservelib.h"\cf3 \
#include \cf4 <stdio.h>\cf3 \
#include \cf4 <math.h>\cf3 \
#include \cf4 <stdlib.h>\cf3 \
\cf0 \
\cf2 //function declaration\cf0 \
\cf5 float\cf0  mtof(\cf5 int\cf0  note);\
\cf5 void\cf0  processNote(\cf5 float\cf0  frequency, \cf5 int\cf0  program, \cf5 float\cf0  length, \cf5 int\cf0  note, \cf5 float\cf0  amp, \cf5 int\cf0  interval);\
\cf5 void\cf0  stopOscillator();\
\cf5 void\cf0  printMainMenu();\
\cf5 void\cf0  printPauseMenu();\
\cf5 void\cf0  printIntervalMenu();\
\cf5 void\cf0  printInstructions();\
\
\
\
\
\cf2 //main function\cf0 \
\cf5 int\cf0  main ()\
\{\
    \cf2 //declaring local variables\cf0 \
    \cf5 int\cf0  pauseChoice = \cf6 1\cf0 ,mainChoice = \cf6 1\cf0 , length, index, program, modWheel = \cf6 0\cf0 , interval = \cf6 0\cf0 ;\
    \cf5 float\cf0  frequency;\
    \
    \
    \cf5 int\cf0  notes[\cf6 8\cf0 ];\
    \cf5 float\cf0  amp[\cf6 8\cf0 ];\
    \
    \
    \
    \cf5 while\cf0  (mainChoice == \cf6 1\cf0 )\
    \{\
        \cf7 printMainMenu\cf0 ();\
        \cf8 scanf\cf0 (\cf4 "%d"\cf0 , &mainChoice);\
        \
        \cf5 if\cf0 (mainChoice == \cf6 1\cf0 )\
        \{\
            \cf5 while\cf0 (pauseChoice < \cf6 9\cf0 )\
            \{\
                \cf7 printInstructions\cf0 ();\
                \
                \cf5 if\cf0  (pauseChoice == \cf6 1\cf0  )\
                \{\
                    \
                    modWheel = \cf6 0\cf0 ;\
                    \
                    \
                    \cf2 //starting sequencer\cf0 \
                    \cf5 while\cf0  (modWheel < \cf6 127\cf0 )\
                    \{\
                        \cf2 //assigning sliders to pitch of individual notes of the sequence\cf0 \
                        notes[\cf6 0\cf0 ] = \cf7 aserveGetControl\cf0 (\cf6 74\cf0 );\
                        notes[\cf6 1\cf0 ] = \cf7 aserveGetControl\cf0 (\cf6 71\cf0 );\
                        notes[\cf6 2\cf0 ] = \cf7 aserveGetControl\cf0 (\cf6 91\cf0 );\
                        notes[\cf6 3\cf0 ] = \cf7 aserveGetControl\cf0 (\cf6 93\cf0 );\
                        notes[\cf6 4\cf0 ] = \cf7 aserveGetControl\cf0 (\cf6 73\cf0 );\
                        notes[\cf6 5\cf0 ] = \cf7 aserveGetControl\cf0 (\cf6 72\cf0 );\
                        notes[\cf6 6\cf0 ] = \cf7 aserveGetControl\cf0 (\cf6 5\cf0 );\
                        notes[\cf6 7\cf0 ] = \cf7 aserveGetControl\cf0 (\cf6 84\cf0 );\
                        \
                        \cf2 //assigning dials to be volume control for individual notes\cf0 \
                        amp[\cf6 0\cf0 ] = \cf7 aserveGetControl\cf0 (\cf6 75\cf0 );\
                        amp[\cf6 1\cf0 ] = \cf7 aserveGetControl\cf0 (\cf6 10\cf0 );\
                        amp[\cf6 2\cf0 ] = \cf7 aserveGetControl\cf0 (\cf6 76\cf0 );\
                        amp[\cf6 3\cf0 ] = \cf7 aserveGetControl\cf0 (\cf6 2\cf0 );\
                        amp[\cf6 4\cf0 ] = \cf7 aserveGetControl\cf0 (\cf6 92\cf0 );\
                        amp[\cf6 5\cf0 ] = \cf7 aserveGetControl\cf0 (\cf6 12\cf0 );\
                        amp[\cf6 6\cf0 ] = \cf7 aserveGetControl\cf0 (\cf6 95\cf0 );\
                        amp[\cf6 7\cf0 ] = \cf7 aserveGetControl\cf0 (\cf6 13\cf0 );\
                        \
                        \
                        \cf5 if\cf0  (modWheel < \cf6 42\cf0 )\
                        \{\
                            \cf5 for\cf0  (index = \cf6 0\cf0 ; index < \cf6 8\cf0 ; index++)\
                            \{\
                                \cf7 processNote\cf0 (frequency, program, length, notes[index], amp[index], interval);\
                            \}\
                            \
                        \}\cf5 else\cf0  \cf5 if\cf0 (modWheel > \cf6 42\cf0  && modWheel < \cf6 84\cf0 )\
                            \
                        \{\
                            \cf5 for\cf0  (index = \cf6 8\cf0 ; index >= \cf6 0\cf0 ; index--)\
                            \{\
                                \cf7 processNote\cf0 (frequency, program, length, notes[index], amp[index], interval);\
                            \}\
                            \
                        \}\cf5 else\cf0  \cf5 if\cf0  (modWheel > \cf6 84\cf0 )\
                            \
                        \{\
                            \cf5 for\cf0  (index = \cf6 0\cf0 ; index < \cf6 8\cf0 ; index++)\
                            \{\
                                \cf7 processNote\cf0 (frequency, program, length, notes[\cf8 rand\cf0 () % \cf6 8\cf0 ], amp[index], interval);\
                            \}\
                            \
                        \}\
                        \
                        modWheel = \cf7 aserveGetControl\cf0 (\cf6 1\cf0 );\
                        \cf5 if\cf0  (modWheel == \cf6 127\cf0 )\
                        \{\
                            \cf7 stopOscillator\cf0 ();\
                        \}\
                    \}\
                    \
                    \cf7 printPauseMenu\cf0 ();\
                    \cf8 scanf\cf0 (\cf4 "%d"\cf0 , &pauseChoice);\
                    \
                \}\cf5 else\cf0  \cf5 if\cf0  (pauseChoice == \cf6 2\cf0 )\
                \{\
                    \cf7 printIntervalMenu\cf0 ();\
                    \cf8 scanf\cf0 (\cf4 "%d"\cf0 , &interval);\
                    pauseChoice = \cf6 1\cf0 ;\
                \}\
                \
            \}\
        \}\
    \}\
    \cf5 return\cf0  \cf6 0\cf0 ;\
\}\
\
\
\cf2 //function definitions\cf0 \
\
\cf2 //mtof function\cf0 \
\cf5 float\cf0  mtof(\cf5 int\cf0  note)\
\{\
    \cf5 float\cf0  frequency;\
    frequency = \cf6 440\cf0  * \cf8 pow\cf0 (\cf6 2\cf0 , (note-\cf6 69\cf0 ) / \cf6 12.0\cf0 );\
    \cf5 return\cf0  frequency;\
\}\
\
\
\
\
\cf2 //processNote function\cf0 \
\cf5 void\cf0  processNote(\cf5 float\cf0  frequency, \cf5 int\cf0  program, \cf5 float\cf0  length, \cf5 int\cf0  note, \cf5 float\cf0  amp, \cf5 int\cf0  interval)\
\{\
    \cf5 float\cf0  frequency2;\
    \cf5 int\cf0  note2;\
    \
    program = \cf7 aserveGetProgram\cf0 ();\
    frequency = \cf7 mtof\cf0 (note);\
    note2 = note + interval;\
    frequency2 = \cf7 mtof\cf0 (note2);\
    length = \cf7 aserveGetControl\cf0 (\cf6 7\cf0 ) * \cf6 7.874\cf0 ;\
    amp = amp / \cf6 127.0\cf0 ;\
    \
    \cf5 switch\cf0  (program)\
    \{\
        \cf5 case\cf0  \cf6 0\cf0 :\
            \cf7 aserveOscillator\cf0 (\cf6 0\cf0 , frequency, amp, \cf6 0\cf0 );\
            \cf7 aserveOscillator\cf0 (\cf6 1\cf0 , \cf6 0\cf0 , \cf6 0\cf0 , \cf6 0\cf0 );\
            \cf7 aserveSleep\cf0 (length);\
            \cf5 break\cf0 ;\
            \
        \cf5 case\cf0  \cf6 1\cf0 :\
            \cf7 aserveOscillator\cf0 (\cf6 0\cf0 , frequency, amp, \cf6 1\cf0 );\
            \cf7 aserveOscillator\cf0 (\cf6 1\cf0 , \cf6 0\cf0 , \cf6 0\cf0 , \cf6 0\cf0 );\
            \cf7 aserveSleep\cf0 (length);\
            \cf5 break\cf0 ;\
            \
        \cf5 case\cf0  \cf6 2\cf0 :\
            \cf7 aserveOscillator\cf0 (\cf6 0\cf0 , frequency, amp, \cf6 2\cf0 );\
            \cf7 aserveOscillator\cf0 (\cf6 1\cf0 , \cf6 0\cf0 , \cf6 0\cf0 , \cf6 0\cf0 );\
            \cf7 aserveSleep\cf0 (length);\
            \cf5 break\cf0 ;\
            \
        \cf5 case\cf0  \cf6 3\cf0 :\
            \cf7 aserveOscillator\cf0 (\cf6 0\cf0 , frequency, amp, \cf6 0\cf0 );\
            \cf7 aserveOscillator\cf0 (\cf6 1\cf0 , frequency2, amp, \cf6 0\cf0 );\
            \cf7 aserveSleep\cf0 (length);\
            \cf5 break\cf0 ;\
            \
        \cf5 case\cf0  \cf6 4\cf0 :\
            \cf7 aserveOscillator\cf0 (\cf6 0\cf0 , frequency, amp, \cf6 1\cf0 );\
            \cf7 aserveOscillator\cf0 (\cf6 1\cf0 , frequency2, amp, \cf6 1\cf0 );\
            \cf7 aserveSleep\cf0 (length);\
            \cf5 break\cf0 ;\
            \
        \cf5 case\cf0  \cf6 5\cf0 :\
            \cf7 aserveOscillator\cf0 (\cf6 0\cf0 , frequency, amp, \cf6 2\cf0 );\
            \cf7 aserveOscillator\cf0 (\cf6 1\cf0 , frequency2, amp, \cf6 2\cf0 );\
            \cf7 aserveSleep\cf0 (length);\
            \cf5 break\cf0 ;\
            \
        \cf5 case\cf0  \cf6 6\cf0 :\
            \cf7 aserveOscillator\cf0 (\cf6 0\cf0 , frequency, amp, \cf6 0\cf0 );\
            \cf7 aserveOscillator\cf0 (\cf6 1\cf0 , frequency2, amp, \cf6 1\cf0 );\
            \cf7 aserveSleep\cf0 (length);\
            \cf5 break\cf0 ;\
            \
        \cf5 case\cf0  \cf6 7\cf0 :\
            \cf7 aserveOscillator\cf0 (\cf6 0\cf0 , frequency, amp, \cf6 0\cf0 );\
            \cf7 aserveOscillator\cf0 (\cf6 1\cf0 , frequency2, amp, \cf6 2\cf0 );\
            \cf7 aserveSleep\cf0 (length);\
            \cf5 break\cf0 ;\
            \
        \cf5 case\cf0  \cf6 8\cf0 :\
            \cf7 aserveOscillator\cf0 (\cf6 0\cf0 , frequency, amp, \cf6 1\cf0 );\
            \cf7 aserveOscillator\cf0 (\cf6 1\cf0 , frequency2, amp, \cf6 2\cf0 );\
            \cf7 aserveSleep\cf0 (length);\
            \cf5 break\cf0 ;\
            \
            \
            \
        \cf5 default\cf0 :\
            \cf5 break\cf0 ;\
    \}\
    \
\}\
\
\cf2 //stopOscillator\cf0 \
\cf5 void\cf0  stopOscillator()\
\{\
    \cf7 aserveOscillator\cf0 (\cf6 0\cf0 , \cf6 0\cf0 , \cf6 0\cf0 , \cf6 0\cf0 );\
    \cf7 aserveOscillator\cf0 (\cf6 1\cf0 , \cf6 0\cf0 , \cf6 0\cf0 , \cf6 0\cf0 );\
\}\
\
\cf2 //printMenu function\cf0 \
\cf5 void\cf0  printMainMenu()\
\{\
    \cf8 printf\cf0 (\cf4 "\\n**********************************"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\t\\t\\t\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\t\\tWELCOME\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\t\\t\\t\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\t\\t\\t\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\tPress 1 to start\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\t\\t\\t\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\t\\t\\t\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\tPress 9 to exit\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n**********************************\\n"\cf0 );\
\}\
\
\cf5 void\cf0  printPauseMenu()\
\{\
    \cf8 printf\cf0 (\cf4 "\\n**********************************"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\t\\t\\t\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\t\\tPAUSE\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\t\\t\\t\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\t\\t\\t\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\tPress 1 to continue\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\tPress 2 to set interval\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\t\\t\\t\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\tPress 9 for main menu\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\t\\t\\t\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\tPlease reset the Mod Wheel\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n**********************************\\n"\cf0 );\
\}\
\
\cf5 void\cf0  printIntervalMenu()\
\{\
    \cf8 printf\cf0 (\cf4 "\\n**********************************"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\t\\t\\t\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\t\\t\\t\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\tEnter interval\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\tin semitones\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\t\\t\\t\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\tFor example:\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\t\\"3\\" or \\"-12\\"\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\t\\t\\t\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n**********************************\\n"\cf0 );\
\}\
\
\cf5 void\cf0  printInstructions()\
\{\
    \cf8 printf\cf0 (\cf4 "\\n************************************************"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\t\\t\\tInstructions\\t\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\tPart\\t\\t\\t\\t\\tFunction\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\tFader 1-8\\t\\t\\t\\tPitch of note\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\tFader 9\\t\\t\\t\\tTempo\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\tDials\\t\\t\\t\\tVolume of note\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\tProgram Buttons \\t\\tSound\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\tMod Wheel\\t\\t\\t\\tPlay mode\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\t\\t\\t\\t\\tlow = forward\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\t\\t\\t\\t\\tmid = backward\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\t\\t\\t\\t\\thigh = random\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\tTo pause move the Mod Wheel to the top\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n*\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t*"\cf0 );\
    \cf8 printf\cf0 (\cf4 "\\n************************************************\\n"\cf0 );\
\}}